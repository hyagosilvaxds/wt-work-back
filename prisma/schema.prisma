generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// AUTHENTICATION MODELS (NextAuth.js)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// APPLICATION MODELS
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?

  // Role relationship
  roleId        String
  role          Role      @relation(fields: [roleId], references: [id])

  // Instructor specific fields
  bio           String?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts          Account[]
  sessions          Session[]
  skills            Skill[]             @relation("UserSkills")
  
  // Relacionamento com instrutor
  instructor        Instructor?
}

model Instructor {
  id                    String    @id @default(cuid())
  userId                String?   @unique
  user                  User?     @relation(fields: [userId], references: [id])
  
  // Informações básicas
  isActive              Boolean   @default(true)
  name                  String
  corporateName         String?   // Razão social (para pessoa jurídica)
  
  // Tipo de pessoa
  personType            String    @default("FISICA") // FISICA ou JURIDICA
  
  // Documentos
  cpf                   String?   @unique           // CPF (para pessoa física)
  cnpj                  String?   @unique           // CNPJ (para pessoa jurídica)
  municipalRegistration String?                     // Inscrição municipal
  stateRegistration     String?                     // Inscrição estadual
  
  // Endereço
  zipCode               String?                     // CEP
  address               String?                     // Endereço
  addressNumber         String?                     // Número
  neighborhood          String?                     // Bairro
  city                  String?                     // Cidade
  state                 String?                     // Estado
  
  // Contatos
  landlineAreaCode      String?                     // DDD telefone fixo
  landlineNumber        String?                     // Telefone fixo
  mobileAreaCode        String?                     // DDD celular
  mobileNumber          String?                     // Celular
  email                 String?   @unique           // Email
  
  // Informações profissionais
  education             String?                     // Escolaridade
  registrationNumber    String?                     // Número do registro profissional
  
  // Informações adicionais
  observations          String?   @db.Text          // Observações
  
  // Relacionamentos
  trainings             Training[] @relation("InstructorTrainings")
  classes               Class[]    @relation("ClassInstructor")

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  // Índices para otimização de consultas
  @@index([cpf])
  @@index([cnpj])
  @@index([email])
}

model Role {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  users       User[]
  permissions RolePermission[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Permission {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  roles       RolePermission[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())

  @@unique([roleId, permissionId])
}

model Skill {
  id    String @id @default(cuid())
  name  String @unique
  users User[] @relation("UserSkills")
}

model Student {
  id                String    @id @default(cuid())
  
  // Informações básicas
  isActive          Boolean   @default(true)        // Aluno ativo?
  name              String                          // Nome do aluno
  cpf               String    @unique               // CPF do aluno
  rg                String?                         // RG do aluno
  gender            String?                         // Sexo (MASCULINO, FEMININO, OUTRO)
  birthDate         DateTime?                       // Data de nascimento
  education         String?                         // Escolaridade
  
  // Endereço do aluno
  zipCode           String?                         // CEP
  address           String?                         // Endereço
  addressNumber     String?                         // Número
  neighborhood      String?                         // Bairro
  city              String?                         // Cidade
  state             String?                         // Estado
  
  // Contatos do aluno
  landlineAreaCode  String?                         // DDD telefone fixo
  landlineNumber    String?                         // Telefone fixo
  mobileAreaCode    String?                         // DDD celular
  mobileNumber      String?                         // Celular
  email             String?   @unique               // Email do aluno
  
  // Informações adicionais
  observations      String?   @db.Text              // Observações
  
  // Relacionamento com cliente
  clientId          String?
  client            Client?   @relation(fields: [clientId], references: [id])
  
  // Timestamps
  enrollmentDate    DateTime  @default(now())       // Data de matrícula
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relacionamentos
  classes           Class[]             @relation("ClassStudents")
  certificates      Certificate[]
  accountsReceivable AccountReceivable[]
  
  // Índices para otimização de consultas
  @@index([cpf])
  @@index([email])
  @@index([clientId])
}

model Client {
  id                    String    @id @default(cuid())
  // Informações básicas
  isActive              Boolean   @default(true)
  name                  String    // Nome ou Razão Social
  corporateName         String?   // Razão social (para pessoa jurídica)
  
  // Tipo de pessoa
  personType            String    @default("FISICA") // FISICA ou JURIDICA
  
  // Documentos
  cpf                   String?   @unique // Para pessoa física
  cnpj                  String?   @unique // Para pessoa jurídica
  municipalRegistration String?   // Inscrição municipal
  stateRegistration     String?   // Inscrição estadual
  
  // Endereço
  zipCode               String?   // CEP
  address               String?   // Endereço
  number                String?   // Número
  neighborhood          String?   // Bairro
  city                  String?   // Cidade
  state                 String?   // Estado
  
  // Contatos
  landlineAreaCode      String?   // DDD telefone fixo
  landlineNumber        String?   // Telefone fixo
  mobileAreaCode        String?   // DDD celular
  mobileNumber          String?   // Celular
  email                 String?   @unique
  
  // Informações adicionais
  observations          String?   @db.Text
  
  // Dados de acesso ao sistema
  responsibleName       String?   // Nome do responsável
  responsibleEmail      String?   // Email do responsável
  responsiblePhone      String?   // Telefone do responsável
  systemUsername        String?   @unique // Usuário
  systemPassword        String?   // Senha (criptografada)
  
  // Relacionamentos
  students              Student[]
  classes               Class[]
  
  // Timestamps
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  // Índices para otimização de consultas
  @@index([cpf])
  @@index([cnpj])
  @@index([email])
  @@index([systemUsername])
}

model Training {
  id            String   @id @default(cuid())
  title         String
  description   String?  @db.Text
  durationHours Int
  
  // Campos específicos do treinamento
  isActive      Boolean  @default(true)        // Treinamento ativo?
  validityDays  Int?                           // Validade em dias
  
  // Relacionamentos
  classes       Class[]
  certificates  Certificate[]
  instructors   Instructor[]   @relation("InstructorTrainings")
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Class {
  id           String   @id @default(cuid())
  trainingId   String
  training     Training @relation(fields: [trainingId], references: [id])
  instructorId String
  instructor   Instructor @relation("ClassInstructor", fields: [instructorId], references: [id])
  roomId       String
  room         Room     @relation(fields: [roomId], references: [id])
  startDate    DateTime
  endDate      DateTime
  
  // Campos específicos da turma
  type         String   @default("CURSO")       // Tipo da turma (CURSO, TREINAMENTO, etc.)
  recycling    String   @default("NÃO")        // Reciclagem (SIM, NÃO)
  status       String   @default("EM_ABERTO")  // Status da turma (EM_ABERTO, EM_ANDAMENTO, FINALIZADA, CANCELADA)
  location     String?                         // Local da turma
  
  // Relacionamento com cliente
  clientId     String?
  client       Client?  @relation(fields: [clientId], references: [id])
  
  // Informações adicionais
  observations String?  @db.Text               // Observações
  
  students     Student[]   @relation("ClassStudents")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([clientId])
}

model Room {
  id        String   @id @default(cuid())
  name      String
  capacity  Int
  classes   Class[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Certificate {
  id             String   @id @default(cuid())
  studentId      String
  student        Student  @relation(fields: [studentId], references: [id])
  trainingId     String
  training       Training @relation(fields: [trainingId], references: [id])
  issueDate      DateTime @default(now())
  validationCode String   @unique
}

// FINANCIAL MODELS
model AccountReceivable {
  id          String        @id @default(cuid())
  description String
  amount      Float
  dueDate     DateTime
  status      String @default("PENDING") // PENDING, PAID, OVERDUE, CANCELED
  studentId   String?
  student     Student?      @relation(fields: [studentId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model AccountPayable {
  id          String        @id @default(cuid())
  description String
  amount      Float
  dueDate     DateTime
  status      String @default("PENDING") // PENDING, PAID, OVERDUE, CANCELED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CashFlow {
  id          String          @id @default(cuid())
  description String
  amount      Float
  type        String
  date        DateTime        @default(now())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}
