generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Lesson {
  id           String             @id @default(cuid())
  title        String
  description  String?
  startDate    DateTime
  endDate      DateTime
  status       String             @default("AGENDADA")
  location     String?
  observations String?
  instructorId String
  clientId     String?
  classId      String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  class        Class?             @relation(fields: [classId], references: [id])
  client       Client?            @relation(fields: [clientId], references: [id])
  instructor   Instructor         @relation(fields: [instructorId], references: [id])
  attendances  LessonAttendance[]

  @@index([instructorId])
  @@index([clientId])
  @@index([classId])
}

model Signature {
  id           String     @id @default(cuid())
  instructorId String     @unique
  pngPath      String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  instructor   Instructor @relation(fields: [instructorId], references: [id])
}

model LessonAttendance {
  id           String   @id @default(cuid())
  lessonId     String
  studentId    String
  status       String   @default("PENDENTE")
  observations String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  lesson       Lesson   @relation(fields: [lessonId], references: [id])
  student      Student  @relation(fields: [studentId], references: [id])

  @@unique([lessonId, studentId])
  @@index([studentId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  roleId        String
  bio           String?
  isActive      Boolean     @default(true)
  accounts      Account[]
  client        Client?
  instructor    Instructor?
  sessions      Session[]
  role          Role        @relation(fields: [roleId], references: [id])
  skills        Skill[]     @relation("UserSkills")
}

model Instructor {
  id                    String     @id @default(cuid())
  userId                String?    @unique
  isActive              Boolean    @default(true)
  name                  String
  corporateName         String?
  personType            String     @default("FISICA")
  cpf                   String?    @unique
  cnpj                  String?    @unique
  municipalRegistration String?
  stateRegistration     String?
  zipCode               String?
  address               String?
  addressNumber         String?
  neighborhood          String?
  city                  String?
  state                 String?
  landlineAreaCode      String?
  landlineNumber        String?
  mobileAreaCode        String?
  mobileNumber          String?
  email                 String?    @unique
  education             String?
  registrationNumber    String?
  observations          String?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  classes               Class[]    @relation("ClassInstructor")
  user                  User?      @relation(fields: [userId], references: [id])
  lessons               Lesson[]
  Signature             Signature?
  trainings             Training[] @relation("InstructorTrainings")

  @@index([cpf])
  @@index([cnpj])
  @@index([email])
}

model Role {
  id          String           @id @default(cuid())
  name        String           @unique
  createdAt   DateTime         @default(now())
  description String?
  updatedAt   DateTime         @updatedAt
  permissions RolePermission[]
  users       User[]
}

model Permission {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  roles       RolePermission[]
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model Skill {
  id    String @id @default(cuid())
  name  String @unique
  users User[] @relation("UserSkills")
}

model Student {
  id                 String              @id @default(cuid())
  isActive           Boolean             @default(true)
  name               String
  cpf                String              @unique
  rg                 String?
  gender             String?
  birthDate          DateTime?
  education          String?
  zipCode            String?
  address            String?
  addressNumber      String?
  neighborhood       String?
  city               String?
  state              String?
  landlineAreaCode   String?
  landlineNumber     String?
  mobileAreaCode     String?
  mobileNumber       String?
  email              String?             @unique
  observations       String?
  clientId           String?
  enrollmentDate     DateTime            @default(now())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  accountsReceivable AccountReceivable[]
  certificates       Certificate[]
  lessonAttendances  LessonAttendance[]
  client             Client?             @relation(fields: [clientId], references: [id])
  classes            Class[]             @relation("ClassStudents")

  @@index([cpf])
  @@index([email])
  @@index([clientId])
}

model Client {
  id                    String    @id @default(cuid())
  name                  String
  email                 String?   @unique
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  address               String?
  city                  String?
  cnpj                  String?   @unique
  corporateName         String?
  cpf                   String?   @unique
  isActive              Boolean   @default(true)
  landlineAreaCode      String?
  landlineNumber        String?
  mobileAreaCode        String?
  mobileNumber          String?
  municipalRegistration String?
  neighborhood          String?
  number                String?
  observations          String?
  personType            String    @default("FISICA")
  responsibleEmail      String?
  responsibleName       String?
  responsiblePhone      String?
  state                 String?
  stateRegistration     String?
  zipCode               String?
  userId                String?   @unique
  classes               Class[]
  user                  User?     @relation(fields: [userId], references: [id])
  lessons               Lesson[]
  students              Student[]

  @@index([cpf])
  @@index([cnpj])
  @@index([email])
}

model Training {
  id            String        @id @default(cuid())
  title         String
  description   String?
  durationHours Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  isActive      Boolean       @default(true)
  validityDays  Int?
  certificates  Certificate[]
  classes       Class[]
  instructors   Instructor[]  @relation("InstructorTrainings")
}

model Class {
  id           String     @id @default(cuid())
  trainingId   String
  instructorId String
  startDate    DateTime
  endDate      DateTime
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  clientId     String?
  location     String?
  observations String?
  recycling    String     @default("N√ÉO")
  status       String     @default("EM_ABERTO")
  type         String     @default("CURSO")
  client       Client?    @relation(fields: [clientId], references: [id])
  instructor   Instructor @relation("ClassInstructor", fields: [instructorId], references: [id])
  training     Training   @relation(fields: [trainingId], references: [id])
  lessons      Lesson[]
  students     Student[]  @relation("ClassStudents")

  @@index([clientId])
}

model Certificate {
  id             String   @id @default(cuid())
  studentId      String
  trainingId     String
  issueDate      DateTime @default(now())
  validationCode String   @unique
  student        Student  @relation(fields: [studentId], references: [id])
  training       Training @relation(fields: [trainingId], references: [id])
}

model AccountReceivable {
  id          String   @id @default(cuid())
  description String
  amount      Float
  dueDate     DateTime
  status      String   @default("PENDING")
  studentId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  student     Student? @relation(fields: [studentId], references: [id])
}

model AccountPayable {
  id          String   @id @default(cuid())
  description String
  amount      Float
  dueDate     DateTime
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CashFlow {
  id          String   @id @default(cuid())
  description String
  amount      Float
  type        String
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

/// M√≥dulo Financeiro
model ContaBancaria {
  id          String   @id @default(cuid())
  nome        String
  banco       String
  agencia     String
  numero      String
  saldo       Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  contas      Conta[]
  transacoes  Transacao[]
}

model Conta {
  id                String        @id @default(cuid())
  nome              String
  tipo              String        // Ex: "RECEBER", "PAGAR"
  valor             Float
  status            String        @default("PENDENTE")
  vencimento        DateTime
  descricao         String?
  contaBancariaId   String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  contaBancaria     ContaBancaria @relation(fields: [contaBancariaId], references: [id])
  transacoes        Transacao[]
}

model Transacao {
  id              String        @id @default(cuid())
  valor           Float
  data            DateTime      @default(now())
  tipo            String        // Ex: "ENTRADA", "SAIDA"
  descricao       String?
  contaId         String
  contaBancariaId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  conta           Conta         @relation(fields: [contaId], references: [id])
  contaBancaria   ContaBancaria @relation(fields: [contaBancariaId], references: [id])
}
