import { PrismaClient } from '@prisma/client';
import * as bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

async function main() {
  console.log('🌱 Iniciando seed...');

  try {
    // Verificar conexão
    await prisma.$connect();
    console.log('✅ Conectado ao banco de dados');

    // Limpar dados existentes (para evitar conflitos)
    console.log('🧹 Limpando dados existentes...');
    await prisma.rolePermission.deleteMany({});
    await prisma.user.deleteMany({});
    await prisma.role.deleteMany({});
    await prisma.permission.deleteMany({});
    await prisma.skill.deleteMany({});
    await prisma.student.deleteMany({});
    await prisma.client.deleteMany({});
    console.log('✅ Dados limpos');

    console.log('📝 Criando permissões...');
    // Criar permissões
    const permissions = await Promise.all([
      prisma.permission.create({
        data: {
          name: 'CREATE_TRAINING',
          description: 'Pode criar treinamentos',
        },
      }),
      prisma.permission.create({
        data: {
          name: 'EDIT_TRAINING',
          description: 'Pode editar treinamentos',
        },
      }),
      prisma.permission.create({
        data: {
          name: 'DELETE_TRAINING',
          description: 'Pode deletar treinamentos',
        },
      }),
      prisma.permission.create({
        data: {
          name: 'TEACH_CLASS',
          description: 'Pode ministrar aulas',
        },
      }),
      prisma.permission.create({
        data: {
          name: 'ENROLL_CLASS',
          description: 'Pode se inscrever em aulas',
        },
      }),
      prisma.permission.create({
        data: {
          name: 'MANAGE_USERS',
          description: 'Pode gerenciar usuários',
        },
      }),
      prisma.permission.create({
        data: {
          name: 'VIEW_FINANCIAL',
          description: 'Pode visualizar dados financeiros',
        },
      }),
      prisma.permission.create({
        data: {
          name: 'MANAGE_FINANCIAL',
          description: 'Pode gerenciar dados financeiros',
        },
      }),
    ]);
    console.log(`✅ ${permissions.length} permissões criadas`);

    console.log('👥 Criando roles...');
    // Criar roles
    const superAdminRole = await prisma.role.create({
      data: {
        name: 'SUPER_ADMIN',
        description: 'Administrador com acesso total',
      },
    });

    const instructorRole = await prisma.role.create({
      data: {
        name: 'INSTRUCTOR',
        description: 'Instrutor que pode ministrar aulas',
      },
    });

    const studentRole = await prisma.role.create({
      data: {
        name: 'STUDENT',
        description: 'Estudante que pode se inscrever em aulas',
      },
    });
    console.log('✅ 3 roles criadas');

    console.log('🔗 Associando permissões às roles...');
    // Associar todas as permissões ao Super Admin
    await Promise.all(
      permissions.map(permission =>
        prisma.rolePermission.create({
          data: {
            roleId: superAdminRole.id,
            permissionId: permission.id,
          },
        })
      )
    );

    // Associar permissões específicas ao Instructor
    const instructorPermissions = permissions.filter(p => 
      ['TEACH_CLASS', 'VIEW_FINANCIAL'].includes(p.name)
    );
    
    await Promise.all(
      instructorPermissions.map(permission =>
        prisma.rolePermission.create({
          data: {
            roleId: instructorRole.id,
            permissionId: permission.id,
          },
        })
      )
    );

    // Associar permissões específicas ao Student
    const studentPermissions = permissions.filter(p => 
      ['ENROLL_CLASS'].includes(p.name)
    );
    
    await Promise.all(
      studentPermissions.map(permission =>
        prisma.rolePermission.create({
          data: {
            roleId: studentRole.id,
            permissionId: permission.id,
          },
        })
      )
    );
    console.log('✅ Permissões associadas às roles');

    console.log('🎯 Criando skills...');
    // Criar skills
    const skills = await Promise.all([
      prisma.skill.create({ data: { name: 'JavaScript' } }),
      prisma.skill.create({ data: { name: 'TypeScript' } }),
      prisma.skill.create({ data: { name: 'React' } }),
      prisma.skill.create({ data: { name: 'Node.js' } }),
      prisma.skill.create({ data: { name: 'Python' } }),
      prisma.skill.create({ data: { name: 'Liderança' } }),
      prisma.skill.create({ data: { name: 'Comunicação' } }),
    ]);
    console.log(`✅ ${skills.length} skills criadas`);

    console.log('🏢 Criando cliente...');
    // Criar um cliente
    const client = await prisma.client.create({
      data: {
        name: 'Empresa ABC',
        responsibleName: 'João Silva',
        email: 'joao@empresaabc.com',
        responsiblePhone: '(11) 99999-9999',
        personType: 'JURIDICA',
        cnpj: '12.345.678/0001-90',
      },
    });
    console.log('✅ Cliente criado');

    console.log('🔐 Gerando senhas hasheadas...');
    // Gerar senhas hasheadas
    const defaultPassword = '123456'; // Senha padrão para todos os usuários
    const hashedPassword = await bcrypt.hash(defaultPassword, 10);
    console.log(`✅ Senha hasheada gerada (senha: ${defaultPassword})`);

    console.log('👤 Criando usuários...');
    // Criar usuários de exemplo
    const superAdmin = await prisma.user.create({
      data: {
        name: 'Super Admin',
        email: 'admin@sistema.com',
        password: hashedPassword,
        roleId: superAdminRole.id,
      },
    });

    const instructor = await prisma.user.create({
      data: {
        name: 'Maria Instrutora',
        email: 'maria@sistema.com',
        password: hashedPassword,
        roleId: instructorRole.id,
        bio: 'Instrutora especializada em desenvolvimento web com mais de 5 anos de experiência.',
        skills: {
          connect: [
            { id: skills[0].id }, // JavaScript
            { id: skills[1].id }, // TypeScript
            { id: skills[2].id }, // React
          ],
        },
      },
    });

    // Criar um estudante usando o modelo Student
    const student = await prisma.student.create({
      data: {
        name: 'Pedro Estudante',
        cpf: '123.456.789-00',
        email: 'pedro@sistema.com',
        clientId: client.id,
        enrollmentDate: new Date(),
      },
    });

    console.log('🎉 Seed executado com sucesso!');
    console.log('📊 Resumo:');
    console.log(`   - ${permissions.length} permissões`);
    console.log(`   - 3 roles`);
    console.log(`   - ${skills.length} skills`);
    console.log(`   - 1 cliente`);
    console.log(`   - 2 usuários + 1 estudante`);
    console.log('');
    console.log('👤 Usuários criados:');
    console.log(`   - Super Admin: ${superAdmin.email} | Senha: ${defaultPassword}`);
    console.log(`   - Instructor: ${instructor.email} | Senha: ${defaultPassword}`);
    console.log(`   - Student: ${student.email} | CPF: ${student.cpf}`);

  } catch (error) {
    console.error('❌ Erro durante o seed:', error);
    throw error;
  }
}

main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
